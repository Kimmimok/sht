'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import supabase from '@/lib/supabase';
import ManagerLayout from '@/components/ManagerLayout';
import {
  Ship,
  Plane,
  Building,
  MapPin,
  Car,
  Plus,
  Eye,
  Edit,
  Trash2,
  Clock,
  CheckCircle,
  XCircle,
  User,
  Calendar,
  Phone,
  Mail,
  ChevronDown,
  ChevronRight
} from 'lucide-react';

interface ReservationData {
  re_id: string;
  re_type: string;
  re_status: string;
  re_created_at: string;
  re_quote_id: string;
  users: {
    id: string;
    name: string;
    email: string;
    phone: string;
  };
  quote: {
    title: string;
    status: string;
  };
  serviceDetails?: any;
  serviceDetailsExtra?: any;
}

interface GroupedReservations {
  [userId: string]: {
    userInfo: {
      id: string;
      name: string;
      email: string;
      phone: string;
    };
    reservations: ReservationData[];
    totalCount: number;
    statusCounts: {
      pending: number;
      confirmed: number;
      cancelled: number;
    };
  };
}

export default function ManagerReservationsPage() {
  const router = useRouter();
  const [reservations, setReservations] = useState<ReservationData[]>([]);
  const [groupedReservations, setGroupedReservations] = useState<GroupedReservations>({});
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState('all');
  const [expandedUsers, setExpandedUsers] = useState<Set<string>>(new Set());
  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadReservations();
  }, []);

  const loadReservations = async () => {
    try {
      console.log('üîç ÏòàÏïΩ Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏãúÏûë...');
      setLoading(true);
      setError(null);

      // 1. ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Î∞è Í∂åÌïú ÌôïÏù∏
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError || !user) {
        console.error('‚ùå Ïù∏Ï¶ù Ïò§Î•ò:', userError);
        throw new Error('Ïù∏Ï¶ùÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      }

      // 2. Îß§ÎãàÏ†Ä Í∂åÌïú ÌôïÏù∏ (ÏóêÎü¨ Ï≤òÎ¶¨ Í∞úÏÑ†)
      const { data: userData, error: userDataError } = await supabase
        .from('users')
        .select('role')
        .eq('id', user.id)
        .maybeSingle();

      if (userDataError) {
        console.error('‚ùå ÏÇ¨Ïö©Ïûê Í∂åÌïú Ï°∞Ìöå Ïã§Ìå®:', userDataError);
        // Í∂åÌïú Ï°∞Ìöå Ïã§Ìå®ÏãúÏóêÎèÑ Í≥ÑÏÜç ÏßÑÌñâ (ÌÖåÏä§Ìä∏Ïö©)
      }

      if (userData && !['manager', 'admin'].includes(userData.role)) {
        throw new Error('Îß§ÎãàÏ†Ä Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      }

      // 3. ÏòàÏïΩ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (Îã®Í≥ÑÎ≥ÑÎ°ú Ï≤òÎ¶¨ÌïòÏó¨ Ïò§Î•ò ÏõêÏù∏ ÌååÏïÖ)
      console.log('üìã ÏòàÏïΩ Í∏∞Î≥∏ Ï†ïÎ≥¥ Ï°∞Ìöå Ï§ë...');

      // Î®ºÏ†Ä Í∏∞Î≥∏ ÏòàÏïΩ Ï†ïÎ≥¥Îßå Ï°∞Ìöå
      const { data: baseReservations, error: reservationError } = await supabase
        .from('reservation')
        .select(`
          re_id,
          re_type,
          re_status,
          re_created_at,
          re_quote_id,
          re_user_id
        `)
        .order('re_created_at', { ascending: false });

      if (reservationError) {
        console.error('‚ùå ÏòàÏïΩ Í∏∞Î≥∏ Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®:', reservationError);
        throw reservationError;
      }

      console.log('‚úÖ ÏòàÏïΩ Í∏∞Î≥∏ Ï†ïÎ≥¥ Ï°∞Ìöå ÏÑ±Í≥µ:', baseReservations?.length || 0, 'Í±¥');

      // ÏÇ¨Ïö©Ïûê/Í≤¨Ï†Å ID ÏàòÏßë ÌõÑ Î∞∞Ïπò Ï°∞Ìöå
      const userIds = Array.from(new Set((baseReservations || []).map(r => r.re_user_id).filter(Boolean)));
      const quoteIds = Array.from(new Set((baseReservations || []).map(r => r.re_quote_id).filter(Boolean)));

      const [usersRes, quotesRes] = await Promise.all([
        userIds.length
          ? supabase.from('users').select('id, name, email, phone').in('id', userIds)
          : Promise.resolve({ data: [], error: null } as any),
        quoteIds.length
          ? supabase.from('quote').select('id, title, status').in('id', quoteIds)
          : Promise.resolve({ data: [], error: null } as any)
      ]);

      if (usersRes.error) console.warn('‚ö†Ô∏è ÏÇ¨Ïö©Ïûê Î∞∞Ïπò Ï°∞Ìöå ÏùºÎ∂Ä Ïã§Ìå®:', usersRes.error);
      if (quotesRes.error) console.warn('‚ö†Ô∏è Í≤¨Ï†Å Î∞∞Ïπò Ï°∞Ìöå ÏùºÎ∂Ä Ïã§Ìå®:', quotesRes.error);

      const userMap = new Map<string, { id: string; name: string; email: string; phone: string }>();
      (usersRes.data || []).forEach((u: any) => userMap.set(u.id, u));

      const quoteMap = new Map<string, { id: string; title: string; status: string }>();
      (quotesRes.data || []).forEach((q: any) => quoteMap.set(q.id, q));

      // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ÏôÄ Í≤¨Ï†Å Ï†ïÎ≥¥Î•º Îß§ÌïëÌïòÏó¨ ÌôïÏû•
      const enrichedReservations: ReservationData[] = [];

      for (const reservation of baseReservations || []) {
        try {
          const userInfo = userMap.get(reservation.re_user_id) || {
            id: reservation.re_user_id,
            name: 'ÎØ∏Îì±Î°ù ÏÇ¨Ïö©Ïûê',
            email: '',
            phone: ''
          };

          const qInfo = reservation.re_quote_id ? quoteMap.get(reservation.re_quote_id) : null;

          // ÏÑúÎπÑÏä§Î≥Ñ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå
          let serviceDetails = null as any;
          let serviceDetailsExtra = null as any;
          try {
            switch (reservation.re_type) {
              case 'cruise': {
                const { data: cruiseDetails } = await supabase
                  .from('reservation_cruise')
                  .select('*')
                  .eq('reservation_id', reservation.re_id)
                  .single();
                serviceDetails = cruiseDetails;
                try {
                  const { data: cruiseCars } = await supabase
                    .from('reservation_cruise_car')
                    .select('*')
                    .eq('reservation_id', reservation.re_id)
                    .order('created_at', { ascending: false })
                    .limit(1);
                  serviceDetailsExtra = Array.isArray(cruiseCars) ? cruiseCars[0] : null;
                } catch (_) { /* noop */ }
                break;
              }
              case 'airport': {
                const { data: airportDetails } = await supabase
                  .from('reservation_airport')
                  .select('*')
                  .eq('reservation_id', reservation.re_id)
                  .single();
                serviceDetails = airportDetails;
                break;
              }
              case 'hotel': {
                const { data: hotelDetails } = await supabase
                  .from('reservation_hotel')
                  .select('*')
                  .eq('reservation_id', reservation.re_id)
                  .single();
                serviceDetails = hotelDetails;
                break;
              }
              case 'rentcar': {
                const { data: rentcarDetails } = await supabase
                  .from('reservation_rentcar')
                  .select('*')
                  .eq('reservation_id', reservation.re_id)
                  .single();
                serviceDetails = rentcarDetails;
                break;
              }
              case 'tour': {
                const { data: tourDetails } = await supabase
                  .from('reservation_tour')
                  .select('*')
                  .eq('reservation_id', reservation.re_id)
                  .single();
                serviceDetails = tourDetails;
                break;
              }
            }
          } catch (serviceError) {
            console.warn('‚ö†Ô∏è ÏÑúÎπÑÏä§ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®:', reservation.re_type, serviceError);
          }

          enrichedReservations.push({
            ...reservation,
            users: userInfo,
            quote: qInfo
              ? { title: qInfo.title ?? 'Ï†úÎ™© ÏóÜÏùå', status: qInfo.status ?? 'unknown' }
              : { title: 'Ïó∞Í≤∞Îêú Í≤¨Ï†Å ÏóÜÏùå', status: 'unknown' },
            serviceDetails,
            serviceDetailsExtra
          });
        } catch (enrichError) {
          console.warn('‚ö†Ô∏è ÏòàÏïΩ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Íµ¨ÏÑ± Ïã§Ìå®:', reservation.re_id, enrichError);
          enrichedReservations.push({
            ...reservation,
            users: {
              id: reservation.re_user_id,
              name: 'ÎØ∏Îì±Î°ù ÏÇ¨Ïö©Ïûê',
              email: '',
              phone: ''
            },
            quote: { title: reservation.re_quote_id ? 'Ï†úÎ™© ÏóÜÏùå' : 'Ïó∞Í≤∞Îêú Í≤¨Ï†Å ÏóÜÏùå', status: 'unknown' },
            serviceDetails: null
          });
        }
      }

      console.log('‚úÖ ÏòàÏïΩ Îç∞Ïù¥ÌÑ∞ ÏôÑÏÑ±:', enrichedReservations.length, 'Í±¥');

      // 4. ÏÇ¨Ïö©ÏûêÎ≥ÑÎ°ú ÏòàÏïΩ Í∑∏Î£πÌôî
      const grouped = groupReservationsByUser(enrichedReservations);

      setReservations(enrichedReservations);
      setGroupedReservations(grouped);
      setLastUpdate(new Date());
      setError(null);

    } catch (error: any) {
      console.error('‚ùå ÏòàÏïΩ Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïã§Ìå®:', error);
      setError(error.message || 'ÏòàÏïΩ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');

      // Í∂åÌïú Ïò§Î•òÏù∏ Í≤ΩÏö∞ Î¶¨Îã§Ïù¥Î†âÌä∏
      if (error.message?.includes('Í∂åÌïú') || error.message?.includes('Ïù∏Ï¶ù')) {
        setTimeout(() => {
          if (error.message?.includes('Ïù∏Ï¶ù')) {
            router.push('/login');
          } else {
            router.push('/');
          }
        }, 2000);
      }
    } finally {
      setLoading(false);
    }
  };

  const groupReservationsByUser = (reservations: ReservationData[]): GroupedReservations => {
    const grouped: GroupedReservations = {};

    reservations.forEach(reservation => {
      const userId = reservation.users.id;

      if (!grouped[userId]) {
        grouped[userId] = {
          userInfo: reservation.users,
          reservations: [],
          totalCount: 0,
          statusCounts: {
            pending: 0,
            confirmed: 0,
            cancelled: 0
          }
        };
      }

      grouped[userId].reservations.push(reservation);
      grouped[userId].totalCount++;

      // ÏÉÅÌÉúÎ≥Ñ Ïπ¥Ïö¥Ìä∏ Ï¶ùÍ∞Ä
      const status = reservation.re_status as 'pending' | 'confirmed' | 'cancelled';
      if (grouped[userId].statusCounts[status] !== undefined) {
        grouped[userId].statusCounts[status]++;
      }
    });

    return grouped;
  };

  const toggleUserExpanded = (userId: string) => {
    setExpandedUsers(prev => {
      const newSet = new Set(prev);
      if (newSet.has(userId)) {
        newSet.delete(userId);
      } else {
        newSet.add(userId);
      }
      return newSet;
    });
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'confirmed': return <CheckCircle className="w-4 h-4 text-green-600" />;
      case 'cancelled': return <XCircle className="w-4 h-4 text-red-600" />;
      default: return <Clock className="w-4 h-4 text-yellow-600" />;
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'pending': return 'ÎåÄÍ∏∞Ï§ë';
      case 'confirmed': return 'ÌôïÏ†ï';
      case 'cancelled': return 'Ï∑®ÏÜåÎê®';
      default: return status;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'confirmed': return 'bg-green-100 text-green-800';
      case 'cancelled': return 'bg-red-100 text-red-800';
      default: return 'bg-yellow-100 text-yellow-800';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'cruise': return <Ship className="w-4 h-4 text-blue-600" />;
      case 'airport': return <Plane className="w-4 h-4 text-green-600" />;
      case 'hotel': return <Building className="w-4 h-4 text-purple-600" />;
      case 'tour': return <MapPin className="w-4 h-4 text-orange-600" />;
      case 'rentcar': return <Car className="w-4 h-4 text-red-600" />;
      default: return <Clock className="w-4 h-4 text-gray-600" />;
    }
  };

  const getTypeName = (type: string) => {
    switch (type) {
      case 'cruise': return 'ÌÅ¨Î£®Ï¶à';
      case 'airport': return 'Í≥µÌï≠';
      case 'hotel': return 'Ìò∏ÌÖî';
      case 'tour': return 'Ìà¨Ïñ¥';
      case 'rentcar': return 'Î†åÌÑ∞Ïπ¥';
      default: return type;
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'cruise': return 'bg-blue-100 text-blue-800';
      case 'airport': return 'bg-green-100 text-green-800';
      case 'hotel': return 'bg-purple-100 text-purple-800';
      case 'tour': return 'bg-orange-100 text-orange-800';
      case 'rentcar': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  // Î™®Îì† Ïª¨ÎüºÏùÑ Ìëú ÌòïÌÉúÎ°ú Ï∂úÎ†•ÌïòÎäî Í≥µÌÜµ Î†åÎçîÎü¨
  const renderDetailTable = (obj: any, type?: string) => {
    if (!obj) return null;
    const labelMap: Record<string, Record<string, string>> = {
      cruise: {
        reservation_id: 'ÏòàÏïΩ ID',
        room_price_code: 'Í∞ùÏã§ Í∞ÄÍ≤© ÏΩîÎìú',
        checkin: 'Ï≤¥ÌÅ¨Ïù∏',
        guest_count: 'ÌÉëÏäπÍ∞ù Ïàò',
        unit_price: 'Îã®Í∞Ä',
        boarding_assist: 'ÏäπÏÑ† ÏßÄÏõê',
        room_total_price: 'Í∞ùÏã§ Ï¥ùÏï°',
        request_note: 'ÏöîÏ≤≠ÏÇ¨Ìï≠',
        created_at: 'ÏÉùÏÑ±ÏùºÏãú'
      },
      airport: {
        reservation_id: 'ÏòàÏïΩ ID',
        airport_price_code: 'Í≥µÌï≠ Í∞ÄÍ≤© ÏΩîÎìú',
        ra_airport_location: 'Í≥µÌï≠ ÏúÑÏπò',
        ra_flight_number: 'Ìï≠Í≥µÌé∏ Î≤àÌò∏',
        ra_datetime: 'ÏùºÏãú',
        ra_stopover_location: 'Í≤ΩÏú†ÏßÄ',
        ra_stopover_wait_minutes: 'Í≤ΩÏú† ÎåÄÍ∏∞(Î∂Ñ)',
        ra_car_count: 'Ï∞®Îüâ Ïàò',
        ra_passenger_count: 'ÏäπÍ∞ù Ïàò',
        ra_luggage_count: 'ÏàòÌïòÎ¨º Ïàò',
        request_note: 'ÏöîÏ≤≠ÏÇ¨Ìï≠',
        ra_is_processed: 'Ï≤òÎ¶¨ Ïó¨Î∂Ä',
        created_at: 'ÏÉùÏÑ±ÏùºÏãú'
      },
      hotel: {
        reservation_id: 'ÏòàÏïΩ ID',
        hotel_price_code: 'Ìò∏ÌÖî Í∞ÄÍ≤© ÏΩîÎìú',
        schedule: 'Ïä§ÏºÄÏ§Ñ',
        room_count: 'Í∞ùÏã§ Ïàò',
        checkin_date: 'Ï≤¥ÌÅ¨Ïù∏',
        breakfast_service: 'Ï°∞Ïãù ÏÑúÎπÑÏä§',
        hotel_category: 'Ìò∏ÌÖî Ïπ¥ÌÖåÍ≥†Î¶¨',
        guest_count: 'Ìà¨ÏàôÍ∞ù Ïàò',
        total_price: 'Ï¥ùÏï°',
        request_note: 'ÏöîÏ≤≠ÏÇ¨Ìï≠',
        created_at: 'ÏÉùÏÑ±ÏùºÏãú'
      },
      rentcar: {
        reservation_id: 'ÏòàÏïΩ ID',
        rentcar_price_code: 'Î†åÌÑ∞Ïπ¥ Í∞ÄÍ≤© ÏΩîÎìú',
        rentcar_count: 'Î†åÌÑ∞Ïπ¥ Ïàò',
        unit_price: 'Îã®Í∞Ä',
        car_count: 'Ï∞®Îüâ Ïàò',
        passenger_count: 'ÏäπÍ∞ù Ïàò',
        pickup_datetime: 'ÌîΩÏóÖ ÏùºÏãú',
        pickup_location: 'ÌîΩÏóÖ Ïû•ÏÜå',
        destination: 'Î™©Ï†ÅÏßÄ',
        via_location: 'Í≤ΩÏú†ÏßÄ',
        via_waiting: 'Í≤ΩÏú† ÎåÄÍ∏∞',
        luggage_count: 'ÏàòÌïòÎ¨º Ïàò',
        total_price: 'Ï¥ùÏï°',
        request_note: 'ÏöîÏ≤≠ÏÇ¨Ìï≠',
        created_at: 'ÏÉùÏÑ±ÏùºÏãú'
      },
      tour: {
        reservation_id: 'ÏòàÏïΩ ID',
        tour_price_code: 'Ìà¨Ïñ¥ Í∞ÄÍ≤© ÏΩîÎìú',
        tour_capacity: 'Ìà¨Ïñ¥ Ï†ïÏõê',
        pickup_location: 'ÌîΩÏóÖ Ïû•ÏÜå',
        dropoff_location: 'ÌïòÏ∞® Ïû•ÏÜå',
        total_price: 'Ï¥ùÏï°',
        request_note: 'ÏöîÏ≤≠ÏÇ¨Ìï≠',
        created_at: 'ÏÉùÏÑ±ÏùºÏãú'
      },
      cruise_car: {
        reservation_id: 'ÏòàÏïΩ ID',
        car_price_code: 'Ï∞®Îüâ Í∞ÄÍ≤© ÏΩîÎìú',
        car_count: 'Ï∞®Îüâ Ïàò',
        passenger_count: 'ÏäπÍ∞ù Ïàò',
        pickup_datetime: 'ÌîΩÏóÖ ÏùºÏãú',
        pickup_location: 'ÌîΩÏóÖ Ïû•ÏÜå',
        dropoff_location: 'ÌïòÏ∞® Ïû•ÏÜå',
        car_total_price: 'Ï∞®Îüâ Ï¥ùÏï°',
        request_note: 'ÏöîÏ≤≠ÏÇ¨Ìï≠',
        created_at: 'ÏÉùÏÑ±ÏùºÏãú',
        updated_at: 'ÏàòÏ†ïÏùºÏãú'
      }
    };

    const hiddenKeys = new Set(['id']);
    const entries = Object.entries(obj).filter(([k]) => {
      if (hiddenKeys.has(k)) return false;
      if (k.endsWith('_id')) return false;
      return true;
    });
    return (
      <div className="overflow-x-auto">
        <table className="min-w-full text-sm border border-gray-200 rounded-lg overflow-hidden">
          <tbody>
            {entries.map(([key, value]) => {
              let display: any = value;
              if (value && typeof value === 'string') {
                const isoLike = /\d{4}-\d{2}-\d{2}/.test(value);
                if (isoLike) {
                  const d = new Date(value);
                  if (!isNaN(d.getTime())) display = d.toLocaleString('ko-KR');
                }
              }
              if (typeof value === 'number') {
                display = Number(value).toLocaleString('ko-KR');
              }
              if (typeof value === 'object' && value !== null) {
                try { display = JSON.stringify(value); } catch { display = String(value); }
              }
              return (
                <tr key={key} className="border-b last:border-0">
                  <th className="w-1/3 text-left bg-gray-50 text-gray-700 px-3 py-2 font-medium align-top">
                    {(type && labelMap[type]?.[key]) || key}
                  </th>
                  <td className="px-3 py-2 text-gray-900 break-all">{display ?? 'null'}</td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    );
  };

  // ÏòàÏïΩ Í∏∞Î≥∏ Ï†ïÎ≥¥Î•º Ìëú ÌòïÌÉúÎ°ú Î†åÎçîÎßÅ
  const renderBaseInfoTable = (reservation: ReservationData) => {
    return (
      <div className="overflow-x-auto">
        <table className="min-w-full text-sm border border-gray-200 rounded-lg overflow-hidden">
          <tbody>
            <tr className="border-b">
              <th className="w-1/3 text-left bg-gray-50 text-gray-700 px-3 py-2 font-medium">ÏòàÏïΩÏùº</th>
              <td className="px-3 py-2 text-gray-900">{new Date(reservation.re_created_at).toLocaleDateString('ko-KR')}</td>
            </tr>
            <tr className="border-b">
              <th className="w-1/3 text-left bg-gray-50 text-gray-700 px-3 py-2 font-medium">ÏÑúÎπÑÏä§ ÌÉÄÏûÖ</th>
              <td className="px-3 py-2 text-gray-900">{getTypeName(reservation.re_type)}</td>
            </tr>
            <tr className="border-b">
              <th className="w-1/3 text-left bg-gray-50 text-gray-700 px-3 py-2 font-medium">ÏòàÏïΩ ÏÉÅÌÉú</th>
              <td className="px-3 py-2 text-gray-900">
                <span className={`px-2 py-1 rounded text-xs font-medium ${getStatusColor(reservation.re_status)}`}>
                  {getStatusText(reservation.re_status)}
                </span>
              </td>
            </tr>
            {reservation.quote && (
              <tr>
                <th className="w-1/3 text-left bg-gray-50 text-gray-700 px-3 py-2 font-medium">Ïó∞Í≤∞Îêú Í≤¨Ï†Å</th>
                <td className="px-3 py-2 text-blue-600 font-medium">{reservation.quote.title}</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    );
  };

  // ÌïÑÌÑ∞ÎßÅÎêú ÏÇ¨Ïö©Ïûê Î™©Î°ù
  const getFilteredUsers = () => {
    return Object.keys(groupedReservations).filter(userId => {
      const userGroup = groupedReservations[userId];
      if (filter === 'all') return true;
      return userGroup.reservations.some(reservation => reservation.re_status === filter);
    });
  };

  const filteredUsers = getFilteredUsers();
  const totalReservations = reservations.length;
  const statusCounts = {
    pending: reservations.filter(r => r.re_status === 'pending').length,
    confirmed: reservations.filter(r => r.re_status === 'confirmed').length,
    cancelled: reservations.filter(r => r.re_status === 'cancelled').length,
  };

  if (loading) {
    return (
      <ManagerLayout title="ÏòàÏïΩ Í¥ÄÎ¶¨" activeTab="reservations">
        <div className="flex justify-center items-center h-64">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-500 mx-auto"></div>
            <p className="mt-4 text-gray-600">ÏòàÏïΩ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
          </div>
        </div>
      </ManagerLayout>
    );
  }

  return (
    <ManagerLayout title="ÏòàÏïΩ Í¥ÄÎ¶¨" activeTab="reservations">
      <div className="space-y-6">

        {/* Ìó§Îçî Î∞è ÌÜµÍ≥Ñ */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex justify-between items-center mb-4">
            <div>
              <h3 className="text-lg font-semibold flex items-center gap-2">
                <User className="w-6 h-6 text-blue-600" />
                Í≥†Í∞ùÎ≥Ñ ÏòàÏïΩ Í¥ÄÎ¶¨
              </h3>
              <p className="text-sm text-gray-600 mt-1">
                Ï¥ù {Object.keys(groupedReservations).length}Î™ÖÏùò Í≥†Í∞ù, {totalReservations}Í±¥Ïùò ÏòàÏïΩ
              </p>
            </div>
            <div className="flex items-center gap-4">
              {lastUpdate && (
                <span className="text-sm text-gray-500">
                  ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏: {lastUpdate.toLocaleTimeString('ko-KR')}
                </span>
              )}
              <button
                onClick={() => {
                  setLoading(true);
                  loadReservations();
                }}
                disabled={loading}
                className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:bg-gray-400 transition-colors"
              >
                {loading ? 'ÏÉàÎ°úÍ≥†Ïπ® Ï§ë...' : 'üîÑ ÏÉàÎ°úÍ≥†Ïπ®'}
              </button>
            </div>
          </div>

          {/* ÌÜµÍ≥Ñ Ïπ¥Îìú */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <User className="w-5 h-5 text-gray-600" />
                <span className="text-sm font-medium">Ï¥ù Í≥†Í∞ù</span>
              </div>
              <div className="text-2xl font-bold text-gray-800">
                {Object.keys(groupedReservations).length}Î™Ö
              </div>
            </div>
            <div className="bg-yellow-50 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <Clock className="w-5 h-5 text-yellow-600" />
                <span className="text-sm font-medium">ÎåÄÍ∏∞Ï§ë</span>
              </div>
              <div className="text-2xl font-bold text-yellow-600">
                {statusCounts.pending}Í±¥
              </div>
            </div>
            <div className="bg-green-50 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <CheckCircle className="w-5 h-5 text-green-600" />
                <span className="text-sm font-medium">ÌôïÏ†ï</span>
              </div>
              <div className="text-2xl font-bold text-green-600">
                {statusCounts.confirmed}Í±¥
              </div>
            </div>
            <div className="bg-red-50 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <XCircle className="w-5 h-5 text-red-600" />
                <span className="text-sm font-medium">Ï∑®ÏÜå</span>
              </div>
              <div className="text-2xl font-bold text-red-600">
                {statusCounts.cancelled}Í±¥
              </div>
            </div>
          </div>

          {error && (
            <div className="mt-4 p-4 bg-red-50 border border-red-200 text-red-700 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <XCircle className="w-5 h-5 text-red-600" />
                <span className="font-medium">Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïò§Î•ò</span>
              </div>
              <p className="text-sm">{error}</p>
              <div className="mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded text-yellow-800 text-xs">
                üí° Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.
              </div>
            </div>
          )}
        </div>

        {/* ÌïÑÌÑ∞ÎßÅ */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <h4 className="text-md font-semibold mb-4">ÏòàÏïΩ ÏÉÅÌÉú ÌïÑÌÑ∞</h4>
          <div className="flex gap-4">
            <button
              onClick={() => setFilter('all')}
              className={`px-4 py-2 rounded-lg transition-colors ${filter === 'all' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
            >
              Ï†ÑÏ≤¥ ({totalReservations})
            </button>
            <button
              onClick={() => setFilter('pending')}
              className={`px-4 py-2 rounded-lg transition-colors ${filter === 'pending' ? 'bg-yellow-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
            >
              ÎåÄÍ∏∞Ï§ë ({statusCounts.pending})
            </button>
            <button
              onClick={() => setFilter('confirmed')}
              className={`px-4 py-2 rounded-lg transition-colors ${filter === 'confirmed' ? 'bg-green-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
            >
              ÌôïÏ†ï ({statusCounts.confirmed})
            </button>
            <button
              onClick={() => setFilter('cancelled')}
              className={`px-4 py-2 rounded-lg transition-colors ${filter === 'cancelled' ? 'bg-red-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
            >
              Ï∑®ÏÜå ({statusCounts.cancelled})
            </button>
          </div>
        </div>

        {/* Í≥†Í∞ùÎ≥Ñ ÏòàÏïΩ Î™©Î°ù */}
        <div className="bg-white rounded-lg shadow-md">
          <div className="p-6 border-b">
            <h3 className="text-lg font-semibold">Í≥†Í∞ùÎ≥Ñ ÏòàÏïΩ Î™©Î°ù</h3>
            <p className="text-sm text-gray-600 mt-1">
              Í≥†Í∞ù Ï†ïÎ≥¥Î•º ÌÅ¥Î¶≠ÌïòÎ©¥ Ìï¥Îãπ Í≥†Í∞ùÏùò ÏòàÏïΩ ÎÇ¥Ïó≠ÏùÑ ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.
            </p>
          </div>

          {filteredUsers.length === 0 ? (
            <div className="p-8 text-center">
              <User className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-600 mb-2">
                {filter === 'all' ? 'ÏòàÏïΩ Í≥†Í∞ùÏù¥ ÏóÜÏäµÎãàÎã§' : `${getStatusText(filter)} ÏòàÏïΩ Í≥†Í∞ùÏù¥ ÏóÜÏäµÎãàÎã§`}
              </h3>
            </div>
          ) : (
            <div className="divide-y">
              {filteredUsers.map((userId) => {
                const userGroup = groupedReservations[userId];
                const isExpanded = expandedUsers.has(userId);

                // ÌïÑÌÑ∞Ïóê ÎßûÎäî ÏòàÏïΩÎßå ÌïÑÌÑ∞ÎßÅ ÌõÑ ÌÉÄÏûÖ ÏàúÏÑúÎ°ú Ï†ïÎ†¨
                const typeOrder = ['cruise', 'airport', 'hotel', 'tour', 'rentcar'];
                const filteredReservations = (filter === 'all'
                  ? userGroup.reservations
                  : userGroup.reservations.filter(r => r.re_status === filter))
                  .slice()
                  .sort((a, b) => {
                    const ta = typeOrder.indexOf(a.re_type);
                    const tb = typeOrder.indexOf(b.re_type);
                    if (ta !== tb) return ta - tb;
                    // ÎèôÏùº ÌÉÄÏûÖ ÎÇ¥ÏóêÏÑúÎäî ÏµúÏã†Ïàú
                    return new Date(b.re_created_at).getTime() - new Date(a.re_created_at).getTime();
                  });

                if (filteredReservations.length === 0) return null;

                return (
                  <div key={userId} className="p-6">
                    {/* Í≥†Í∞ù Ï†ïÎ≥¥ Ìó§Îçî */}
                    <div
                      className="flex items-center justify-between cursor-pointer hover:bg-gray-50 -m-2 p-2 rounded-lg"
                      onClick={() => toggleUserExpanded(userId)}
                    >
                      <div className="flex items-center gap-4">
                        <div className="flex items-center gap-2">
                          {isExpanded ? (
                            <ChevronDown className="w-5 h-5 text-gray-500" />
                          ) : (
                            <ChevronRight className="w-5 h-5 text-gray-500" />
                          )}
                          <User className="w-8 h-8 p-1.5 bg-blue-100 text-blue-600 rounded-full" />
                        </div>

                        <div>
                          <h4 className="font-semibold text-lg text-gray-800">
                            {userGroup.userInfo.name}
                          </h4>
                          <div className="flex items-center gap-4 text-sm text-gray-600">
                            <div className="flex items-center gap-1">
                              <Mail className="w-4 h-4" />
                              {userGroup.userInfo.email}
                            </div>
                            <div className="flex items-center gap-1">
                              <Phone className="w-4 h-4" />
                              {userGroup.userInfo.phone}
                            </div>
                          </div>
                        </div>
                      </div>

                      <div className="flex items-center gap-4">
                        {/* ÏòàÏïΩ ÌòÑÌô© ÏöîÏïΩ */}
                        <div className="flex gap-2">
                          {userGroup.statusCounts.pending > 0 && (
                            <span className="px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded-full">
                              ÎåÄÍ∏∞ {userGroup.statusCounts.pending}
                            </span>
                          )}
                          {userGroup.statusCounts.confirmed > 0 && (
                            <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                              ÌôïÏ†ï {userGroup.statusCounts.confirmed}
                            </span>
                          )}
                          {userGroup.statusCounts.cancelled > 0 && (
                            <span className="px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full">
                              Ï∑®ÏÜå {userGroup.statusCounts.cancelled}
                            </span>
                          )}
                        </div>

                        <div className="text-sm text-gray-500">
                          Ï¥ù {filteredReservations.length}Í±¥
                        </div>
                      </div>
                    </div>

                    {/* ÏòàÏïΩ ÏÉÅÏÑ∏ Î™©Î°ù (ÌôïÏû• Ïãú ÌëúÏãú) */}
                    {isExpanded && (
                      <div className="mt-4 space-y-6">
                        {/* Í≥†Í∞ùÎ≥Ñ ÏòàÏïΩ Í∏∞Î≥∏ Ï†ïÎ≥¥ - Í∑∏Î£π ÌïòÎã®Ïóê 1Ìöå ÌëúÏãú */}
                        {(() => {
                          const allReservations = userGroup.reservations;
                          const counts = userGroup.statusCounts;
                          const times = allReservations
                            .map(r => new Date(r.re_created_at).getTime())
                            .filter(n => !isNaN(n));
                          const latest = times.length ? new Date(Math.max(...times)) : null;
                          const earliest = times.length ? new Date(Math.min(...times)) : null;
                          return (
                            <div className="bg-white rounded-lg border border-gray-200">
                              <div className="px-6 py-4 border-b bg-gray-50 rounded-t-lg">
                                <h4 className="font-medium text-gray-900 flex items-center gap-2">
                                  <Calendar className="w-5 h-5 text-blue-600" />
                                  ÏòàÏïΩ Í∏∞Î≥∏ Ï†ïÎ≥¥
                                </h4>
                              </div>
                              <div className="p-4">
                                <div className="overflow-x-auto">
                                  <table className="min-w-full text-sm border border-gray-200 rounded-lg overflow-hidden">
                                    <tbody>
                                      <tr className="border-b">
                                        <th className="w-1/3 text-left bg-gray-50 text-gray-700 px-3 py-2 font-medium">Ï¥ù ÏòàÏïΩ Í±¥Ïàò</th>
                                        <td className="px-3 py-2 text-gray-900">{userGroup.totalCount.toLocaleString('ko-KR')}Í±¥</td>
                                      </tr>
                                      <tr className="border-b">
                                        <th className="w-1/3 text-left bg-gray-50 text-gray-700 px-3 py-2 font-medium">ÏÉÅÌÉúÎ≥Ñ Í±¥Ïàò</th>
                                        <td className="px-3 py-2 text-gray-900">
                                          <div className="flex gap-3">
                                            <span className="px-2 py-1 rounded text-xs font-medium bg-yellow-100 text-yellow-800">ÎåÄÍ∏∞ {counts.pending}</span>
                                            <span className="px-2 py-1 rounded text-xs font-medium bg-green-100 text-green-800">ÌôïÏ†ï {counts.confirmed}</span>
                                            <span className="px-2 py-1 rounded text-xs font-medium bg-red-100 text-red-800">Ï∑®ÏÜå {counts.cancelled}</span>
                                          </div>
                                        </td>
                                      </tr>
                                      <tr className="border-b">
                                        <th className="w-1/3 text-left bg-gray-50 text-gray-700 px-3 py-2 font-medium">Ï≤´ ÏòàÏïΩÏùº</th>
                                        <td className="px-3 py-2 text-gray-900">{earliest ? earliest.toLocaleDateString('ko-KR') : '-'}</td>
                                      </tr>
                                      <tr>
                                        <th className="w-1/3 text-left bg-gray-50 text-gray-700 px-3 py-2 font-medium">ÏµúÏã† ÏòàÏïΩÏùº</th>
                                        <td className="px-3 py-2 text-gray-900">{latest ? latest.toLocaleDateString('ko-KR') : '-'}</td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </div>
                              </div>
                            </div>
                          );
                        })()}
                        {(() => {
                          // Í≤¨Ï†Å IDÎ≥ÑÎ°ú Í∑∏Î£πÌôîÌïòÏó¨ ÌÉÄÏù¥ÌãÄÍ≥º Ìï®Íªò ÌëúÏãú
                          const groupedByQuote = filteredReservations.reduce((acc, r) => {
                            const qid = r.re_quote_id || 'no-quote';
                            (acc[qid] ||= []).push(r);
                            return acc;
                          }, {} as Record<string, ReservationData[]>);

                          // Ï†ïÎ†¨: Í≤¨Ï†Å Í∑∏Î£πÏùÄ Ï≤´ ÏòàÏïΩ ÏµúÏã†Ïàú
                          const quoteEntries = Object.entries(groupedByQuote).sort(([, a], [, b]) => {
                            const ta = Math.max(...a.map(x => new Date(x.re_created_at).getTime()));
                            const tb = Math.max(...b.map(x => new Date(x.re_created_at).getTime()));
                            return tb - ta;
                          });

                          return quoteEntries.map(([qid, list]) => {
                            // Í∑∏Î£π Ìó§Îçî Ï†ïÎ≥¥
                            const title = list[0]?.quote?.title || (qid === 'no-quote' ? 'Ïó∞Í≤∞Îêú Í≤¨Ï†Å ÏóÜÏùå' : 'Ï†úÎ™© ÏóÜÏùå');
                            const shortId = qid !== 'no-quote' ? `${qid.slice(0, 8)}...` : '';

                            // Í∞Å Í∑∏Î£π ÎÇ¥ ÏòàÏïΩÏùÄ ÌÉÄÏûÖ ÏàúÏÑú + ÏµúÏã†Ïàú
                            const typeOrder = ['cruise', 'airport', 'hotel', 'tour', 'rentcar'];
                            const sortedList = list.slice().sort((a, b) => {
                              const ta = typeOrder.indexOf(a.re_type);
                              const tb = typeOrder.indexOf(b.re_type);
                              if (ta !== tb) return ta - tb;
                              return new Date(b.re_created_at).getTime() - new Date(a.re_created_at).getTime();
                            });

                            return (
                              <div key={qid} className="bg-white rounded-lg border border-blue-200 overflow-hidden">
                                <div className="px-6 py-3 bg-blue-50 flex items-center justify-between border-b border-blue-200">
                                  <div className="flex items-center gap-3">
                                    <Calendar className="w-4 h-4 text-blue-600" />
                                    <span className="font-medium text-blue-800">Í≤¨Ï†Å: {title}</span>
                                    {shortId && <span className="text-xs text-blue-600">({shortId})</span>}
                                    {/* ÌÉÄÏûÖÎ≥Ñ Í∞úÏàò Ïπ© */}
                                    <div className="flex items-center gap-1 ml-2">
                                      {['cruise', 'airport', 'hotel', 'tour', 'rentcar'].map(t => {
                                        const cnt = list.filter(x => x.re_type === t).length;
                                        if (!cnt) return null;
                                        const color = t === 'cruise' ? 'bg-blue-100 text-blue-700' :
                                          t === 'airport' ? 'bg-green-100 text-green-700' :
                                            t === 'hotel' ? 'bg-purple-100 text-purple-700' :
                                              t === 'tour' ? 'bg-orange-100 text-orange-700' :
                                                'bg-red-100 text-red-700';
                                        return (
                                          <span key={t} className={`px-2 py-0.5 rounded-full text-xs ${color}`}>{getTypeName(t)} {cnt}</span>
                                        );
                                      })}
                                    </div>
                                  </div>
                                  {qid !== 'no-quote' && (
                                    <button
                                      onClick={(e) => { e.stopPropagation(); router.push(`/manager/quotes/${qid}/view`); }}
                                      className="text-xs px-3 py-1 rounded border border-blue-300 text-blue-700 hover:bg-blue-100"
                                    >
                                      Í≤¨Ï†Å Î≥¥Í∏∞
                                    </button>
                                  )}
                                </div>

                                <div className="p-4 space-y-3">
                                  {sortedList.map((reservation) => {
                                    // ÌïòÏù¥ÎùºÏù¥Ìä∏ Ï†ïÎ≥¥ Ï∂îÏ∂ú (Í∞ÑÎã® ÌëúÍ∏∞)
                                    const sd: any = reservation.serviceDetails || {};
                                    let dateStr = '';
                                    let timeStr = '';
                                    let locStr = '';
                                    if (reservation.re_type === 'cruise') {
                                      if (sd.checkin) { dateStr = new Date(sd.checkin).toLocaleDateString('ko-KR'); }
                                      locStr = 'ÌïòÎ°±Î≤†Ïù¥';
                                    } else if (reservation.re_type === 'airport') {
                                      if (sd.ra_datetime) {
                                        const d = new Date(sd.ra_datetime);
                                        dateStr = d.toLocaleDateString('ko-KR');
                                        timeStr = d.toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit', hour12: false });
                                      }
                                      locStr = sd.ra_airport_location || '';
                                    } else if (reservation.re_type === 'hotel') {
                                      if (sd.checkin_date) { dateStr = new Date(sd.checkin_date).toLocaleDateString('ko-KR'); }
                                      locStr = sd.hotel_category || '';
                                    } else if (reservation.re_type === 'rentcar') {
                                      if (sd.pickup_datetime) {
                                        const d = new Date(sd.pickup_datetime);
                                        dateStr = d.toLocaleDateString('ko-KR');
                                        timeStr = d.toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit', hour12: false });
                                      }
                                      if (sd.pickup_location && sd.destination) {
                                        locStr = `${sd.pickup_location} ‚Üí ${sd.destination}`;
                                      } else {
                                        locStr = sd.pickup_location || sd.destination || '';
                                      }
                                    } else if (reservation.re_type === 'tour') {
                                      if (sd.tour_date) { dateStr = new Date(sd.tour_date).toLocaleDateString('ko-KR'); }
                                      locStr = sd.pickup_location || sd.dropoff_location || '';
                                    }

                                    return (
                                      <div key={reservation.re_id} className="flex items-center justify-between p-3 border border-gray-200 rounded-lg">
                                        <div className="flex items-center gap-3">
                                          {getTypeIcon(reservation.re_type)}
                                          <div>
                                            <div className="flex items-center gap-2">
                                              <span className="font-medium text-gray-900">{getTypeName(reservation.re_type)}</span>
                                              <span className={`px-2 py-0.5 rounded text-xs font-medium ${getStatusColor(reservation.re_status)}`}>
                                                {getStatusText(reservation.re_status)}
                                              </span>
                                            </div>
                                            <div className="text-xs text-gray-600 flex gap-3 mt-0.5">
                                              {dateStr && <span>{dateStr}{timeStr ? ` ${timeStr}` : ''}</span>}
                                              {locStr && <span>ÏúÑÏπò: {locStr}</span>}
                                              <span className="text-gray-400">ID: {reservation.re_id.slice(0, 8)}...</span>
                                            </div>
                                          </div>
                                        </div>
                                        <div className="flex items-center gap-2">
                                          <button
                                            onClick={(e) => { e.stopPropagation(); router.push(`/manager/reservations/${reservation.re_id}/view`); }}
                                            className="px-3 py-1 bg-blue-500 text-white rounded text-xs hover:bg-blue-600 flex items-center gap-1"
                                          >
                                            <Eye className="w-3 h-3" /> ÏÉÅÏÑ∏
                                          </button>
                                          <button
                                            onClick={(e) => { e.stopPropagation(); router.push(`/manager/reservations/${reservation.re_id}/edit`); }}
                                            className="px-3 py-1 bg-green-500 text-white rounded text-xs hover:bg-green-600"
                                          >
                                            ÏàòÏ†ï
                                          </button>
                                        </div>
                                      </div>
                                    );
                                  })}
                                </div>
                              </div>
                            );
                          });
                        })()}
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
          )}
        </div>

        {/* Îπ†Î•∏ Ïï°ÏÖò */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
            <Plus className="w-6 h-6 text-green-600" />
            Îπ†Î•∏ Ïï°ÏÖò
          </h3>
          <div className="grid md:grid-cols-4 gap-4">
            <button
              onClick={() => router.push('/manager/reservations/analytics')}
              className="bg-blue-50 hover:bg-blue-100 p-4 rounded-lg text-left transition-colors border border-blue-200"
            >
              <div className="flex items-center gap-2 mb-2">
                <div className="p-2 bg-blue-500 text-white rounded">
                  <Calendar className="w-5 h-5" />
                </div>
                <span className="font-medium">ÏòàÏïΩ Î∂ÑÏÑù</span>
              </div>
              <p className="text-sm text-gray-600">
                ÏòàÏïΩ ÌòÑÌô©Í≥º ÌÜµÍ≥ÑÎ•º ÏÉÅÏÑ∏Ìûà ÌôïÏù∏Ìï©ÎãàÎã§.
              </p>
            </button>

            <button
              onClick={() => router.push('/manager/reservations/bulk')}
              className="bg-green-50 hover:bg-green-100 p-4 rounded-lg text-left transition-colors border border-green-200"
            >
              <div className="flex items-center gap-2 mb-2">
                <div className="p-2 bg-green-500 text-white rounded">
                  <Edit className="w-5 h-5" />
                </div>
                <span className="font-medium">ÏòàÏïΩ Ï≤òÎ¶¨</span>
              </div>
              <p className="text-sm text-gray-600">
                ÏòàÏïΩÏùÑ Ï≤òÎ¶¨Ìï©ÎãàÎã§.
              </p>
            </button>

            <button
              onClick={() => router.push('/manager/reservations/export')}
              className="bg-purple-50 hover:bg-purple-100 p-4 rounded-lg text-left transition-colors border border-purple-200"
            >
              <div className="flex items-center gap-2 mb-2">
                <div className="p-2 bg-purple-500 text-white rounded">
                  <Calendar className="w-5 h-5" />
                </div>
                <span className="font-medium">Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞</span>
              </div>
              <p className="text-sm text-gray-600">
                ÏòàÏïΩ Îç∞Ïù¥ÌÑ∞Î•º ExcelÎ°ú ÎÇ¥Î≥¥ÎÉÖÎãàÎã§.
              </p>
            </button>

            <button
              onClick={async () => {
                console.log('üîß Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ ÏãúÏûë...');
                try {
                  const { data, error } = await supabase.from('reservation').select('count').limit(1);
                  if (error) throw error;
                  alert('‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏÑ±Í≥µ!');
                  console.log('‚úÖ DB Ïó∞Í≤∞ ÏÑ±Í≥µ:', data);
                } catch (error) {
                  console.error('‚ùå DB Ïó∞Í≤∞ Ïã§Ìå®:', error);
                  alert('‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ïã§Ìå®: ' + (error as any)?.message);
                }
              }}
              className="bg-gray-50 hover:bg-gray-100 p-4 rounded-lg text-left transition-colors border border-gray-200"
            >
              <div className="flex items-center gap-2 mb-2">
                <div className="p-2 bg-gray-500 text-white rounded">
                  <Clock className="w-5 h-5" />
                </div>
                <span className="font-medium">DB Ïó∞Í≤∞ ÌÖåÏä§Ìä∏</span>
              </div>
              <p className="text-sm text-gray-600">
                Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏÉÅÌÉúÎ•º ÌôïÏù∏Ìï©ÎãàÎã§.
              </p>
            </button>
          </div>
        </div>
      </div>
    </ManagerLayout>
  );
}
